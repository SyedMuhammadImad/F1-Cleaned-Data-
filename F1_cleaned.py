# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1frmVvy8nFLvUbVD95m2wYbAHSZkD2PX4
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from google.colab import files
uploaded = files.upload()

drivers = pd.read_csv('drivers.csv')
constructors = pd.read_csv('constructors.csv')
races = pd.read_csv('races.csv')
results = pd.read_csv('results.csv')
circuits = pd.read_csv('circuits.csv')
lap_time = pd.read_csv('lap_times.csv')

df = results.merge(drivers, on='driverId') \
            .merge(constructors, on='constructorId')

df = df.merge(races[['raceId', 'year', 'round', 'circuitId']], on='raceId') \
       .merge(circuits[['circuitId', 'name']], on='circuitId')

print(df)

df.head()

df.tail()

df.info()

"""# Info"""

print(results.columns)

print(constructors.columns)

print(circuits.columns)

print(drivers.columns)

print(races.columns)

"""# Constructor Analysis"""

winners = results[results['positionOrder']== 1]
winners = winners.merge(races[['raceId','year']], on = 'raceId' )
winners = winners.merge(constructors[['constructorId','name']], on = 'constructorId' )
wins_by_year = winners.groupby(['year','name']).size().reset_index(name = 'wins')
top_constructor = wins_by_year.sort_values(['year','wins'],ascending=[True,False]).drop_duplicates('year')
print(top_constructor.head(3))
print(top_constructor.tail(3))

avg_constructor = results[results['points'].notna()]
avg_constructor = avg_constructor.merge(constructors[['constructorId','name']], on = 'constructorId')
avg_points = avg_constructor.groupby('name')['points'].mean().reset_index()
avg_points = avg_points.sort_values(by = 'points',ascending=False)
print(avg_points)

results['position'] = pd.to_numeric(results['position'], errors='coerce')
total_entries = results.groupby('constructorId').size()
podium = results[results['position'] <= 3].groupby('constructorId').size()
podium_rate = (podium / total_entries).reset_index(name = 'podium_rate')
podium_rate = podium_rate.merge(constructors[['constructorId','name']],on = 'constructorId')
best_podium = podium_rate.sort_values('podium_rate',ascending = False)
print(best_podium.head(1))

wins_by_constructor = top_constructor.groupby('name')['wins'].sum().sort_values(ascending = False)
plt.bar(wins_by_constructor.index,wins_by_constructor.values)
plt.xlabel('Teams')
plt.ylabel('Number of Wins')
plt.xticks(rotation = 90)
plt.title('Top Constructors by Wins')

"""# Driver Analysis"""

results['position'] = pd.to_numeric(results['position'],errors='coerce')
overall_wins = results[results['position'] == 1].groupby('driverId').size().reset_index(name = 'wins')
overall_wins = overall_wins.merge(drivers[['driverId','forename','surname']],on = 'driverId')
overall_wins = overall_wins.sort_values('wins',ascending = False)
print(overall_wins.head(1))



results['position'] = pd.to_numeric(results['position'],errors='coerce')
results = results.drop(columns = 'date',errors = 'ignore' )
results = results.merge(races[['raceId','date']],on = 'raceId')
results['year'] = pd.to_datetime(results['date']).dt.year
results['decade'] = (results['year'] // 10) * 10
decade_wins = results[results['position'] == 1].groupby(['driverId','decade']).size().reset_index(name = 'wins')
decade_wins = decade_wins.merge(drivers[['driverId','forename','surname']], on  = 'driverId')
decade_wins = decade_wins.sort_values('wins',ascending = False)
most_wins_decade = decade_wins.loc[decade_wins.groupby('decade')['wins'].idxmax()]
print(most_wins_decade)

fastest = results[results['fastestLap'].notna()]
fastest['fastestLap'] = pd.to_numeric(fastest['fastestLap'],errors='coerce')
fastest = fastest.merge(drivers[['driverId','forename','surname']],on = 'driverId')
fastest = fastest.merge(races[['raceId', 'circuitId']],on = 'raceId')
fastest = fastest.merge(circuits[['circuitId', 'name']],on = 'circuitId')
fastest = fastest.dropna(subset = ['fastestLap'])
idx = fastest.groupby('circuitId')['fastestLap'].idxmax()
fastest_per_circuit = fastest.loc[idx].dropna()
print(fastest_per_circuit[['name', 'forename', 'surname', 'fastestLapSpeed']].sort_values('fastestLapSpeed', ascending=False))

highest = results[results['points'].notna()]
highest = highest.merge(drivers[['driverId','forename','surname']], on = 'driverId')
highest = highest.merge(races[['raceId','year','circuitId']], on = 'raceId')
highest = highest.merge(circuits[['circuitId','name']], on = 'circuitId')
idx = highest.groupby('raceId')['points'].idxmax()
highest_per_race = highest.loc[idx].reset_index(drop = True)
print(highest_per_race[['year_y', 'forename', 'surname', 'name', 'points']].sort_values('year_y'))

top10 = overall_wins.head(10)
plt.bar(top10['forename'] + ' ' + top10['surname'],top10['wins'])
plt.xticks(rotation = 90)
plt.xlabel('Driver')
plt.ylabel('Number of Wins')
plt.title('Top 10 Drivers by Wins')

"""# Track Analysis"""

print(races.columns)

print(circuits.columns)

print(results.columns )

most = races['circuitId'].value_counts().reset_index()
most.columns = ['circuitId','race_count']
most = most.merge(circuits[['circuitId','name','country','location']],on = 'circuitId')
most = most.sort_values('race_count',ascending = False)
print(most.head(10))

print(lap_time.columns)

valid = results[(results['grid'].notna()) & (results['position'].notna()) & (results['grid'] > 0)]
valid['position'] = pd.to_numeric(valid['position'], errors = 'coerce' )
valid['overtakes'] = valid['grid'] - valid['position']
valid = valid.merge(races[['raceId','circuitId']], on = 'raceId')
tracks_over = valid.groupby('circuitId')['overtakes'].sum().reset_index()
tracks_over = tracks_over.merge(circuits[['circuitId','name']], on = 'circuitId')
tracks_over = tracks_over.sort_values('overtakes',ascending = False)
print(tracks_over[['name','overtakes']].head(10))

Dnf = results[results ['position'].isna() & results['grid'].notna()]
dnf_count = Dnf.groupby('raceId').size().reset_index(name = "DNF counts")
dnf_count = dnf_count.sort_values('DNF counts',ascending = False)
most_dnf  = dnf_count.merge(races[['raceId','year','circuitId','name']],on = 'raceId')
most_dnf = most_dnf.merge(circuits[['circuitId','country','location']], on = 'circuitId')
print(most_dnf[['name','DNF counts','country','location']].head(10))

print(results.columns)

valid_times = results[results['time'].notna() & (results['time'] != r'\N')].copy()
def time_convert(t):
  try:
      parts = t.split(':')
      if len(parts) == 3:
          hours, minutes, seconds = parts
          return int(hours) * 3600 + int(minutes) * 60 + float(seconds)
      elif len(parts) == 2:
          minutes,seconds = parts
          return int(minutes) * 60 + float(seconds)
      else:
          return float(t)
  except:
     return None

valid_times['time'] = valid_times['time'].apply(time_convert)
valid_times = valid_times.merge(races[['raceId', 'circuitId']], on = 'raceId')
valid_times = valid_times.merge(circuits[['circuitId', 'name']],on = 'circuitId')
avg_time = valid_times.groupby('name')['time'].mean().reset_index(name = 'avg_time')
avg_time = avg_time.sort_values('avg_time',ascending = True)

plt.bar(avg_time['name'].head(10),avg_time['avg_time'].head(10))
plt.xticks(rotation = 90)
plt.xlabel('Track')
plt.ylabel('Average Time')
plt.title('Average Track Time')

gvf = results[['raceId','grid','position']].copy()
gvf = gvf.merge(races[['raceId', 'circuitId','name','year']], on = 'raceId')
gvf = gvf[gvf['year'] == 2024]
gvf = gvf.sort_values('grid',ascending = True)
print(gvf[['name','grid','position']])

plt.scatter(gvf['grid'],gvf['position'])
plt.xlabel('Grid')
plt.ylabel('Position')
plt.title('Grid vs Position')

